//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Homesfy.Entities.Entity
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class admin_homesfy_Entities : DbContext
    {
        public admin_homesfy_Entities()
            : base("name=admin_homesfy_Entities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<Builder> Builder { get; set; }
        public DbSet<Builder_EscalationMatrix> Builder_EscalationMatrix { get; set; }
        public DbSet<BuilderProjectConfig> BuilderProjectConfig { get; set; }
        public DbSet<BuilderProjectFloorPlan> BuilderProjectFloorPlan { get; set; }
        public DbSet<BuilderProjects> BuilderProjects { get; set; }
        public DbSet<BuilderProjectSubConfig> BuilderProjectSubConfig { get; set; }
        public DbSet<BuilderProjExternalAmenities> BuilderProjExternalAmenities { get; set; }
        public DbSet<BuilderProjGallery> BuilderProjGallery { get; set; }
        public DbSet<BuilderProjInternalAmenities> BuilderProjInternalAmenities { get; set; }
        public DbSet<BuildingGallery> BuildingGallery { get; set; }
        public DbSet<BuildingPrefId> BuildingPrefId { get; set; }
        public DbSet<BuyerProfile> BuyerProfile { get; set; }
        public DbSet<CrmLeadDetails> CrmLeadDetails { get; set; }
        public DbSet<CrmLeadFeedback> CrmLeadFeedback { get; set; }
        public DbSet<GreatPlaceGallery> GreatPlaceGallery { get; set; }
        public DbSet<InDividualBasicProfile> InDividualBasicProfile { get; set; }
        public DbSet<LocalityBlock> LocalityBlock { get; set; }
        public DbSet<LocalityBlockGallery> LocalityBlockGallery { get; set; }
        public DbSet<LocalityDetails> LocalityDetails { get; set; }
        public DbSet<LocalityDetailsCommute> LocalityDetailsCommute { get; set; }
        public DbSet<LocalityGallery> LocalityGallery { get; set; }
        public DbSet<LocalityGreatPlaces> LocalityGreatPlaces { get; set; }
        public DbSet<LocalityKeyHighLights> LocalityKeyHighLights { get; set; }
        public DbSet<LocalitySuggestions> LocalitySuggestions { get; set; }
        public DbSet<LocalityTags> LocalityTags { get; set; }
        public DbSet<LocalityTripRequest> LocalityTripRequest { get; set; }
        public DbSet<mBuilderProjects> mBuilderProjects { get; set; }
        public DbSet<mBuildings> mBuildings { get; set; }
        public DbSet<mCategoryOfExternalAmenities> mCategoryOfExternalAmenities { get; set; }
        public DbSet<mCity> mCity { get; set; }
        public DbSet<mCountry> mCountry { get; set; }
        public DbSet<mCrmDepartment> mCrmDepartment { get; set; }
        public DbSet<mCrmLeadPurpose> mCrmLeadPurpose { get; set; }
        public DbSet<mCrmLeadSources> mCrmLeadSources { get; set; }
        public DbSet<mInternalAmenities> mInternalAmenities { get; set; }
        public DbSet<mLocality> mLocality { get; set; }
        public DbSet<mNeighbourHoodTags> mNeighbourHoodTags { get; set; }
        public DbSet<mPriceRange> mPriceRange { get; set; }
        public DbSet<mPropConfig> mPropConfig { get; set; }
        public DbSet<mPropertyCategory> mPropertyCategory { get; set; }
        public DbSet<mSociety> mSociety { get; set; }
        public DbSet<mSocietyGallery> mSocietyGallery { get; set; }
        public DbSet<mState> mState { get; set; }
        public DbSet<Project> Project { get; set; }
        public DbSet<Prop_List> Prop_List { get; set; }
        public DbSet<Prop_Review> Prop_Review { get; set; }
        public DbSet<PropBlogs> PropBlogs { get; set; }
        public DbSet<SecurityQuestionMaster> SecurityQuestionMaster { get; set; }
        public DbSet<sysdiagrams> sysdiagrams { get; set; }
        public DbSet<UserCredential> UserCredential { get; set; }
        public DbSet<UserRoles> UserRoles { get; set; }
        public DbSet<UserTagPreferences> UserTagPreferences { get; set; }
        public DbSet<PropscoutProfile> PropscoutProfile { get; set; }
        public DbSet<PropscoutWorkAreas> PropscoutWorkAreas { get; set; }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    }
}
